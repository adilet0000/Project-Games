/* const $thumbs = document.querySelectorAll('.thumb li');
const $infoSliders = document.querySelectorAll('.info-slider');
const $items = document.querySelectorAll('.item');

let currentIndex = 0;

$thumbs.forEach((thumb, index) => {
    thumb.addEventListener('click', (event) => {

        setTimeout(() => {
            document.querySelector('.thumb . selected').classList.remove('selected');
            thumb.classList.add('selected');
        }, 100);

        $thumbs.forEach((thum) => {
            thum.classList.add('disabled');
            setTimeout(() => {
                thum.classList.remove('disabled');
            }, 450);
        });

        let anySelected = false;
        let currentSelected = event.target.parentElement.nextElementSibling;

        while (currentSelected !== null && !anySelected) {
            anySelected = anySelected || currentSelected.matches('.selected');
            currentSelected = currentSelected.nextElementSibling;

            if (anySelected) {
                $items[currentIndex].classList.add('previously-active');
                setTimeout(() => {
                    document.querySelector('.item.previously-active').classList.remove('previously-active');
                }, 100);

                currentIndex = index;
                $items[currentIndex].classList.add('back-active');

                setTimeout(() => {
                    document.querySelector('.item.back-active').classList.remove('back-active');
                }, 100);
            };
        };

        currentIndex = index;

        $infoSliders.forEach(slide => {
            slide.style.transform = `translateX(${currentIndex * -100}%)`;
        });

        document.querySelector('.item.active').classList.remove('active');
        $items[currentIndex].classList.add('active');

        document.querySelector('.thumb .selected').classList.remove('selected');
        thumb.classList.add('selected');


    });
}); */


    <!-- SLIDER -->
    <!-- <div class="slider_block">
        <div class="container">
            <div class="inner_slider">
                <div class="slider">
                    <button class="btn-slide" id="prev">&lt;prev</button>
                    <div class="slide active_slide">
                        <div class="slide_card">
                            <h3>regular expression</h3>
                            <p>Простыми словами, регулярное выражение - это набор символов, который задает определенные правила для поиска и сопоставления текста. Вы можете использовать регулярные выражения, чтобы найти определенные строки в тексте, заменить части строки на другие значения или извлечь нужную информацию из текста.</p>
                            <a href="https://developer.mozilla.org/ru/docs/Web/JavaScript/Guide/Regular_expressions" target="_blank">узнать подробнее</a>
                        </div>
                    </div>
                    <div class="slide">
                        <div class="slide_card">
                            <h3>recursion</h3>
                            <p>Простыми словами, рекурсия - это, когда функция делает повторяющиеся вызовы самой себя для решения задачи, пока не достигнет определенного условия выхода из рекурсии.</p>
                            <a href="https://learn.javascript.ru/recursion" target="_blank">узнать подробнее</a>
                        </div>
                    </div>
                    <div class="slide">
                        <div class="slide_card">
                            <h3>json</h3>
                            <p>Простыми словами, JSON - это способ представления данных в виде текста, чтобы они могли быть легко поняты и использованы различными программами. Он использует простые правила для описания объектов и массивов, а также для представления простых типов данных, таких как строки, числа, логические значения и т.д.</p>
                            <a href="https://developer.mozilla.org/ru/docs/Learn/JavaScript/Objects/JSON" target="_blank">узнать подробнее</a>
                        </div>
                    </div>
                    <div class="slide">
                        <div class="slide_card">
                            <h3>event loop</h3>
                            <p>Простыми словами, event loop похож на дежурного, который непрерывно проверяет, произошло ли какое-либо событие, и реагирует на него, когда оно происходит. Он имеет список задач, которые нужно выполнить, и он перебирает этот список событий одно за другим, обрабатывая каждое событие, когда оно наступает.</p>
                            <a href="https://highload.today/kak-ustroen-event-loop-v-javascript-parallelnaya-model-i-tsikl-sobytij/" target="_blank">узнать подробнее</a>
                        </div>
                    </div>
                    <button class="btn-slide" id="next">next&gt;</button>
                </div>
            </div>
        </div>
    </div> -->


        <div class="header">
            <div class="container">
                <div class="inner_header">
                    <a href="index.html">
                        <div class="logotype">
                            <h2>BG</h2>
                        </div>
                    </a>
                    <ul class="menu">
                        <li class="menu_link">
                            <a href="pages/home_works.html">page1</a>
                        </li>
                        <li class="menu_link">
                            <a href="pages/lessons.html">page2</a>
                        </li>
                    </ul>
                    <button class="btn" id="btn-get">Click me!</button>
                </div>
            </div>
        </div>